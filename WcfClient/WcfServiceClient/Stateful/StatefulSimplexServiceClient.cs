//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IStatefulSimplexService", SessionMode=System.ServiceModel.SessionMode.Required)]
public interface IStatefulSimplexService
{
    
    [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IStatefulSimplexService/Start", ReplyAction="http://tempuri.org/IStatefulSimplexService/StartResponse")]
    int Start(int initValue);
    
    [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IStatefulSimplexService/Start", ReplyAction="http://tempuri.org/IStatefulSimplexService/StartResponse")]
    System.Threading.Tasks.Task<int> StartAsync(int initValue);
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IStatefulSimplexService/AddTo", ReplyAction="http://tempuri.org/IStatefulSimplexService/AddToResponse")]
    int AddTo(int n);
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IStatefulSimplexService/AddTo", ReplyAction="http://tempuri.org/IStatefulSimplexService/AddToResponse")]
    System.Threading.Tasks.Task<int> AddToAsync(int n);
    
    [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IStatefulSimplexService/Stop", ReplyAction="http://tempuri.org/IStatefulSimplexService/StopResponse")]
    string Stop();
    
    [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IStatefulSimplexService/Stop", ReplyAction="http://tempuri.org/IStatefulSimplexService/StopResponse")]
    System.Threading.Tasks.Task<string> StopAsync();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IStatefulSimplexServiceChannel : IStatefulSimplexService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class StatefulSimplexServiceClient : System.ServiceModel.ClientBase<IStatefulSimplexService>, IStatefulSimplexService
{
    
    public StatefulSimplexServiceClient()
    {
    }
    
    public StatefulSimplexServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public StatefulSimplexServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public StatefulSimplexServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public StatefulSimplexServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public int Start(int initValue)
    {
        return base.Channel.Start(initValue);
    }
    
    public System.Threading.Tasks.Task<int> StartAsync(int initValue)
    {
        return base.Channel.StartAsync(initValue);
    }
    
    public int AddTo(int n)
    {
        return base.Channel.AddTo(n);
    }
    
    public System.Threading.Tasks.Task<int> AddToAsync(int n)
    {
        return base.Channel.AddToAsync(n);
    }
    
    public string Stop()
    {
        return base.Channel.Stop();
    }
    
    public System.Threading.Tasks.Task<string> StopAsync()
    {
        return base.Channel.StopAsync();
    }
}

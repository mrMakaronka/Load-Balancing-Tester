//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18408
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IStatefulService", CallbackContract=typeof(IStatefulServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
public interface IStatefulService
{
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IStatefulService/Clear")]
    void Clear();
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IStatefulService/Clear")]
    System.Threading.Tasks.Task ClearAsync();
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IStatefulService/AddTo")]
    void AddTo(double n);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IStatefulService/AddTo")]
    System.Threading.Tasks.Task AddToAsync(double n);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IStatefulService/SubtractFrom")]
    void SubtractFrom(double n);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IStatefulService/SubtractFrom")]
    System.Threading.Tasks.Task SubtractFromAsync(double n);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IStatefulService/MultiplyBy")]
    void MultiplyBy(double n);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IStatefulService/MultiplyBy")]
    System.Threading.Tasks.Task MultiplyByAsync(double n);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IStatefulService/DivideBy")]
    void DivideBy(double n);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IStatefulService/DivideBy")]
    System.Threading.Tasks.Task DivideByAsync(double n);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IStatefulServiceCallback
{
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IStatefulService/Equals")]
    void Equals(double result);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IStatefulService/Equation")]
    void Equation(string eqn);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IStatefulServiceChannel : IStatefulService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class StatefulServiceClient : System.ServiceModel.DuplexClientBase<IStatefulService>, IStatefulService
{
    
    public StatefulServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
            base(callbackInstance)
    {
    }
    
    public StatefulServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
            base(callbackInstance, endpointConfigurationName)
    {
    }
    
    public StatefulServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public StatefulServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public StatefulServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, binding, remoteAddress)
    {
    }
    
    public void Clear()
    {
        base.Channel.Clear();
    }
    
    public System.Threading.Tasks.Task ClearAsync()
    {
        return base.Channel.ClearAsync();
    }
    
    public void AddTo(double n)
    {
        base.Channel.AddTo(n);
    }
    
    public System.Threading.Tasks.Task AddToAsync(double n)
    {
        return base.Channel.AddToAsync(n);
    }
    
    public void SubtractFrom(double n)
    {
        base.Channel.SubtractFrom(n);
    }
    
    public System.Threading.Tasks.Task SubtractFromAsync(double n)
    {
        return base.Channel.SubtractFromAsync(n);
    }
    
    public void MultiplyBy(double n)
    {
        base.Channel.MultiplyBy(n);
    }
    
    public System.Threading.Tasks.Task MultiplyByAsync(double n)
    {
        return base.Channel.MultiplyByAsync(n);
    }
    
    public void DivideBy(double n)
    {
        base.Channel.DivideBy(n);
    }
    
    public System.Threading.Tasks.Task DivideByAsync(double n)
    {
        return base.Channel.DivideByAsync(n);
    }
}
